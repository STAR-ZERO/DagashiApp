buildscript {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
    dependencies {
        classpath(libs.bundles.plugins)
    }
}

def isCI = System.getenv("CI") != null

subprojects {
    // ./gradlew dependencyUpdates -DoutputFormatter=html
    apply plugin: "com.github.ben-manes.versions"
    // ./gradlew ktlintCheck
    // ./gradlew ktlintFormat
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    ktlint {
        version = "0.45.2"
        android = true
        verbose = true
        ignoreFailures = isCI
        reporters {
            reporter "checkstyle"
        }
        filter {
            exclude { element ->
                element.file.path.contains("/build/generated/")
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"

            // Compose metrics report
            // https://github.com/androidx/androidx/blob/androidx-main/compose/compiler/design/compiler-metrics.md
            // ./gradlew --rerun-tasks -Pdagashiapp.enableComposeCompilerReports=true androidApp:app:assembleRelease
            if (project.findProperty("dagashiapp.enableComposeCompilerReports") == "true") {
                freeCompilerArgs += [
                        "-P",
                        "plugin:androidx.compose.compiler.plugins.kotlin:reportsDestination=" +
                                project.buildDir.absolutePath + "/compose_metrics"
                ]
                freeCompilerArgs += [
                        "-P",
                        "plugin:androidx.compose.compiler.plugins.kotlin:metricsDestination=" +
                                project.buildDir.absolutePath + "/compose_metrics"
                ]
            }
        }
    }

    // test task for CI
    if (project.name != "shared") {
        // TODO: Currently, kmm test is not working
        afterEvaluate {
            if (project.extensions.findByName("android") != null) {
                project.tasks.register("testCI") {
                    dependsOn "testDebugUnitTest"
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
